(in-package :megastrike)

(defmethod display-round-report ((frame megastrike) stream)
  (write-string (game/phase-log *game*) stream)
  (incf (game/current-phase *game*))
  (if (= (game/current-phase *game*) 5)
      (setf (game/current-phase *game*) 0))
  (terpri stream)
  (let ((done-button (make-pane 'push-button
                                :label "Done"
                                :activate-callback
                                #'(lambda (g)
                                    (do-phase frame)))))
    (with-output-as-gadget (stream)
    done-button)))

(defmethod display-lobby-force-list ((frame megastrike) stream)
  (if (= 0 (length (beast:all-entities)))
      (write-string "Force has no units yet." stream)
      (formatting-table (stream)
        (formatting-row (stream)
          (formatting-cell (stream) (write-string "Unit Name" stream))
          (formatting-cell (stream) (write-string "PV" stream))
          (formatting-cell (stream) (write-string "Pilot Name" stream))
          (formatting-cell (stream) (write-string "Skill" stream))
          (formatting-cell (stream) (write-string "Starting Hex" stream)))
        (run-list-force))))

(defmethod display-lobby-detail-view ((frame megastrike) stream)
  (let* ((pname  (make-pane 'text-field :width 200 :value "Test Pilot"))
         (pskill (make-pane 'text-field :width 50 :value "4")))
    (formatting-table (stream)
      (formatting-row (stream)
        (formatting-cell (stream) (format stream "Pilot name: "))
        (formatting-cell (stream) (with-output-as-gadget (stream) pname))
        (formatting-cell (stream) (format stream "Pilot skill: "))
        (formatting-cell (stream) (with-output-as-gadget (stream) pskill))))
    (terpri stream)
    (with-output-as-gadget (stream)
      (let ((add-unit-button
              (make-pane 'push-button
                         :label "Add Unit"
                         :activate-callback
                         #'(lambda (g)
                             (add-unit (game/selected-force *game*)
                                       (new-element-from-mul
                                        (lobby/selected-mek *lobby*)
                                        :pname (gadget-value pname)
                                        :pskill (parse-integer (gadget-value pskill))))
                             (redisplay-frame-panes frame)))))
      add-unit-button)))
  (terpri stream)
  (let ((meks *master-unit-list*))
    (formatting-table (stream)
      (formatting-row (stream)
        (formatting-cell (stream) (write-string "Unit name" stream))
        (formatting-cell (stream) (write-string "PV" stream))
        (formatting-cell (stream) (write-string "Size" stream))
        (formatting-cell (stream) (write-string "Move" stream))
        (formatting-cell (stream) (write-string "S/M/L" stream))
        (formatting-cell (stream) (write-string "OV" stream))
        (formatting-cell (stream) (write-string "A/S" stream))
        (formatting-cell (stream) (write-string "Specials" stream)))
    (dolist (m meks)
      (if (and (lobby/selected-mek *lobby*)
               (string= (mek/short-name m)
                        (mek/short-name (lobby/selected-mek *lobby*))))
          (with-text-style (stream *selected-text-style*)
            (present m 'mek :stream stream))
          (present m 'mek :stream stream))))))

(defmethod display-quickstats ((frame megastrike) stream)
  (run-show-quickstats))
